# name: DebugBuild
# on:
#   push: 
#     branches:
#       - master
# env:
#   # リポジトリのルートディレクトリを基点としたソリューションファイルのパス
#   SOLUTION_FILE_PATH: Project/ONEngine.sln
#   # visual studio の構成(Debug/Release)
#   CONFIGURATION: Debug
  
# jobs:
#   build:
#     runs-on: windows-2022

#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4
      
#     - name: Add MSBuild to PATH
#       uses: microsoft/setup-msbuild@v2
#       with:
#         msbuild-architecture: x64
    
#     - name: Build
#       run: |
#         msbuild ${{env.SOLUTION_FILE_PATH}} /p:Platform=x64,Configuration=${{env.CONFIGURATION}}
name: DebugBuild

on:
  push:
    branches:
      - master

env:
  # ソリューションファイルの出力先（Premakeが出力する予定の場所）
  SOLUTION_FILE_PATH: Project/ONEngine.sln
  CONFIGURATION: Debug
  PREMAKE_SCRIPT_PATH: ./GenerateProject.ps1  # Premake実行スクリプト

jobs:
  build:
    runs-on: windows-2022

    steps:
    # 1. ソース取得
    - name: Checkout
      uses: actions/checkout@v4

    # 2. PowerShellスクリプトを使ってプロジェクト生成
    - name: Generate project with Premake
      shell: pwsh
      run: |
        Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process
        ./Project/GenerateProject.ps1

    # 3. MSBuildのセットアップ
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      with:
        vs-version: 'latest'

    # 4. Mainプロジェクト生成（Premake再実行）
    - name: Generate main project
      shell: pwsh
      run: ./Project/GenerateProject.ps1

    # 5. ONEngineビルド
    - name: Build ONEngine
      run: msbuild ${{env.SOLUTION_FILE_PATH}} /p:Platform=x64,Configuration=Debug

    # 6. MSBuildをPATHに追加（必要に応じて）
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: x64

    # 7. Debugビルド（最後の確認用）
    - name: Build Debug
      run: |
        msbuild ${{ env.SOLUTION_FILE_PATH }} /p:Platform=x64,Configuration=${{ env.CONFIGURATION }}
